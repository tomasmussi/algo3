<!--
Ant simple sample project.
 Kick start your java builds.
 Find out more at http://www.bodkinconsulting.com
 or http://java.net/projects/ant-simple-sample

Instructions:
Put this file in an empty directory and run the 'ant' command in that directory. The build file will create directories and make a very empty jar file in the same directory as the build.xml.

Create src/HW.java and put this code in it.

public class HW
{
    public static void main(String [] args)
    {
        System.out.println("Hello World");
    }

}

in the build file below change
<property name="main_class_name" value="changeme"/>
to
<property name="main_class_name" value="HW"/>

Run the ant command again, and now you can run your main class with the command
java -jar antsimple.jar

It should print:
Hellow World
and exit.

Add a junit.jar (from junit.org) into your ANT_HOME/lib directory and run 'ant test'

Create the file test/HWTest.java and add this code.
import junit.framework.*;
public class HWTest extends TestCase {
    public void testTrue()
    {
        assertTrue(true);
    }
}

 -->

<project name="CarmenSandiego" default="jugar" basedir=".">
	<!-- set global properties for this build -->
	<property name="ant.project.name" value="antsimple"/>
	<property name="main_class_name" value="algo3.modelo.juego.Aplicacion"/>
	<property name="jarname"  value="${ant.project.name}"/>
	<!-- set directories -->
	<property name="src" location="src"/>
	<property name="test" location="test"/>
	<property name="build" location="build"/>
	<property name="dist"  location="dist"/>
	<property name="lib"  location="libs"/>
	<property name="reports.xml.dir" location="${build}/reports"/>

  	<path id="project.classpath">
    	<pathelement location="${build}" />
    	<fileset dir="${lib}">
			<include name="*.jar" />
			<include name="/xstream/*.jar"/>
		</fileset>
  	</path>


  	<target name="clean" description="Limpiar carpeta build" >
    <!-- Delete the ${build} directory-->
    	<delete dir="${build}"/>
  	</target>

  	<target name="clean.dist" description="Limpiar carpeta distribucion">
  		<delete dir="${dist}"/>
  	</target>

  	<target name="init" description="Crea carpetas necesarias para deployar">
	    <!-- Create the time stamp -->
	    <tstamp/>
	    <!-- Create directories if needed -->
	    <mkdir dir="${src}"/>
	    <mkdir dir="${test}"/>
	    <mkdir dir="${build}"/>
	    <mkdir dir="${dist}"/>
	  	<mkdir dir="${reports.xml.dir}"/>
  	</target>

	<target name="compile" depends="clean, init" description="Compila codigo fuente" >
    <!-- Compile the java code from ${src} into ${build} -->
		<javac debug="true" srcdir="${src}" destdir="${build}" classpathref="project.classpath" includeantruntime="false">
			<!-- Revisar el classpath-->
			<!--<classpath>
				<fileset dir="${lib}">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="${lib}/xstream">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>-->
		</javac>
		
		<!-- Copy files from ${src} into ${build} -->
		<copy todir="${build}">
		    <fileset dir="${src}">
		      <exclude name="**/*.java"/>
		    </fileset>
			<fileset dir="${lib}">
				<include name="**/*.jar"/>
				<include name="xstream/*.jar"/>
			</fileset>
		</copy>
	</target>
	
	<target name="compiletest" depends="compile" description="Compilar tests">
	        <javac debug="true" srcdir="${test}" destdir="${build}" classpathref="project.classpath" includeantruntime="false"/>
	</target>

	<target name="test" depends="compiletest" description="Ejecutar tests">
		<junit printsummary="yes" fork="yes" haltonfailure="yes">
	  		<formatter type="plain"/>
	  		<batchtest fork="true">
				<fileset dir="${test}">
	  				<include name="**/*Test*.java"/>
				</fileset>
	  		</batchtest>
	  		<classpath refid="project.classpath" />
		</junit>
  		<fail message="Pruebas fallidas" if="test.failure" />
  		<junitreport todir="${reports.xml.dir}">
  			<fileset dir="${reports.xml.dir}">
  				<include name="TEST-*.xml" />
  			</fileset>
  		</junitreport>
  	</target>

	<!-- No haria falta si anda el makeJar --> 
  	<target name="dist" depends="compile, clean.dist" description="Generar jar" >		
    	<!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    	<jar jarfile="${dist}/${jarname}.jar" basedir="${build}" excludes="*Test.class">
	    	<!--<zipfileset excludes="META-INF/**/*" src="${lib}/bcprov-jdk16-145.jar"/>-->
	    	<!--<zipfileset excludes="META-INF/**/*" src="${lib}/*.jar"/>-->
	    	<zipgroupfileset dir="${lib}" includes="*.jar" excludes="META-INF/**/*"/>
	        <manifest>
	        	<attribute name="Main-Class" value="${main_class_name}"/>
	        	<attribute name="Class-Path" value="${project.classpath}"/>
	        </manifest>
    	</jar>
  	</target>

	<target name="makeJar" depends="compile, clean.dist" description="Crea un Jar ejecutable">
    	<manifest file="MANIFEST.MF">
        	<attribute name="Built-By" value="Tomas"/>
            <attribute name="Main-Class" value="${main_class_name}"/>
    		<attribute name="Class-Path" value="${jar.classpath}"/>
    		<!--<attribute name="Class-Path" value=" C:\Eclipse-Kepler\eclipse\workspace\TP2\libs\*.jar"/>-->
    		<!--<attribute name="Class-Path" value=" C:\Eclipse-Kepler\eclipse\workspace\TP2\libs\xstream\*.jar"/>-->
        </manifest>
		<copy todir="${build}">
        	<fileset dir="${src}">
            	<exclude name="**/*.java"/>
            </fileset>
        </copy>
        <jar destfile="${dist}/${jarname}.jar" basedir="${build}" includes="**" manifest="MANIFEST.MF"/>
    </target>

    <target name="jugar" depends="makeJar" description="Corre el programa desde un Jar">
    	<ant target="clean"/>
        <java jar="${dist}/${jarname}.jar" fork="true" classpathref="project.classpath"/>
    </target>

    <target name="Menu">
            <echo>ant clean : limpia los directorios de compilaciones pasadas (No necesario en correrPrograma)</echo>
            <echo>ant compilar : compila el programa</echo>
            <echo>ant corrertests : compila el programa y corre los tests</echo>
            <echo>ant correrPrograma : genera el archivo .jar y lo ejecuta</echo>
            <echo>ant makeJar: genera un archivo .jar ejecutable del juego</echo>
            <echo>ant compilarWork : compila el programa desde la estructura del workspace</echo>
            <echo>ant corrertestsWork : compila el programa y corre los tests desde la estructura del workspace</echo>
    </target>

</project>

