<!--
Ant simple sample project.
 Kick start your java builds.
 Find out more at http://www.bodkinconsulting.com
 or http://java.net/projects/ant-simple-sample

Instructions:
Put this file in an empty directory and run the 'ant' command in that directory. The build file will create directories and make a very empty jar file in the same directory as the build.xml.

Create src/HW.java and put this code in it.

public class HW
{
    public static void main(String [] args)
    {
        System.out.println("Hello World");
    }

}

in the build file below change
<property name="main_class_name" value="changeme"/>
to
<property name="main_class_name" value="HW"/>

Run the ant command again, and now you can run your main class with the command
java -jar antsimple.jar

It should print:
Hellow World
and exit.

Add a junit.jar (from junit.org) into your ANT_HOME/lib directory and run 'ant test'

Create the file test/HWTest.java and add this code.
import junit.framework.*;
public class HWTest extends TestCase {
    public void testTrue()
    {
        assertTrue(true);
    }
}

 -->

<project name="CarmenSandiego" default="jugar" basedir=".">
	<!-- set global properties for this build -->
	<property name="ant.project.name" value="antsimple"/>
	<property name="main_class_name" value="algo3.modelo.juego.Aplicacion"/>
	<property name="jarname"  value="${ant.project.name}"/>
	<!-- set directories -->
	<property name="src" location="src"/>
	<property name="test" location="test"/>
	<property name="build" location="build"/>
	<property name="dist"  location="dist"/>
	<property name="lib"  location="libs"/>
	<property name="reports.xml.dir" location="${build}/reports"/>
	<property name="user" value="Tomas"/>	

  	<path id="project.classpath">
    	<pathelement location="${build}" />
    	<fileset dir="${lib}">
			<include name="*.jar" />
			<include name="/xstream/*.jar"/>
		</fileset>
  	</path>


  	<target name="clean" description="Limpiar carpeta build" >
    <!-- Delete the ${build} directory-->
    	<delete dir="${build}"/>
  	</target>

  	<target name="clean.dist" description="Limpiar carpeta distribucion">
  		<delete dir="${dist}"/>
  	</target>

  	<target name="init" description="Crea carpetas necesarias para deployar">
	    <!-- Create the time stamp -->
	    <tstamp/>
	    <!-- Create directories if needed -->
	    <mkdir dir="${src}"/>
	    <mkdir dir="${test}"/>
	    <mkdir dir="${build}"/>
	    <mkdir dir="${dist}"/>
	  	<mkdir dir="${reports.xml.dir}"/>
  	</target>

	<target name="compile" depends="clean, init" description="Compila codigo fuente" >
    <!-- Compile the java code from ${src} into ${build} -->
		<javac debug="true" srcdir="${src}" destdir="${build}" classpathref="project.classpath" includeantruntime="false">
		</javac>

		<!-- Copy files from ${src} into ${build} -->
		<!-->-->
	</target>
	
	<target name="compiletest" depends="compile" description="Compilar tests">
	        <javac debug="true" srcdir="${test}" destdir="${build}" classpathref="project.classpath" includeantruntime="false"/>
	</target>

	<target name="test" depends="compiletest" description="Ejecutar tests">
		<copy todir="${build}">
		    <fileset dir="${src}">
		      <exclude name="**/*.java"/>
		    </fileset>
			<fileset dir="${lib}">
				<include name="**/*.jar"/>
				<include name="xstream/*.jar"/>
			</fileset>
		</copy>
		<junit printsummary="yes" fork="yes" haltonfailure="yes">
	  		<formatter type="plain"/>
	  		<batchtest fork="true">
				<fileset dir="${test}">
	  				<include name="**/*Test*.java"/>
				</fileset>
	  		</batchtest>
	  		<classpath refid="project.classpath" />
		</junit>
  		<fail message="Pruebas fallidas" if="test.failure" />
  		<junitreport todir="${reports.xml.dir}">
  			<fileset dir="${reports.xml.dir}">
  				<include name="TEST-*.xml" />
  			</fileset>
  		</junitreport>
  	</target>

	<target name="makeJar" depends="compile, clean.dist" description="Crea un Jar ejecutable">
    	<manifest file="MANIFEST.MF">
        	<attribute name="Built-By" value="${user}"/>
    		<attribute name="Class-Path" value="."/>
            <attribute name="Main-Class" value="${main_class_name}"/>
        </manifest>
		<copy todir="${build}">
		    <fileset dir="${src}">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
		<fileset dir="${build}"/>
		
		<copy ></copy>
        <!--<zipfileset excludes="META-INF/*.SF" src="${lib}/junit-4.10.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/cglib-nodep-2.2.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/dom4j-1.6.1.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/jdom-1.1.3.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/jdom2-2.0.5.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/jettison-1.2.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/joda-time-1.6.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/json-20080701.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/kxml2-2.3.0.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/kxml2-min-2.3.0.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/stax-1.2.0.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/stax-api-1.0.1.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/wstx-asl-3.2.7.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/xmlpull-1.1.3.1.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/xom-1.1.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/xpp3_min-1.1.4c.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/xstream/xstream-1.4.7.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/forms-1.3.0.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/jxbrowser-4.4.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/license.jar"/>
        <zipfileset excludes="META-INF/*.SF" src="${lib}/jxbrowser-win-4.4.jar"/>-->
		
		
		<!--<unzip src="${lib}/junit-4.10.jar" dest="${build}"/>-->
        <unzip src="${lib}/xstream/cglib-nodep-2.2.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/dom4j-1.6.1.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/jdom-1.1.3.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/jdom2-2.0.5.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/jettison-1.2.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/joda-time-1.6.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/json-20080701.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/kxml2-2.3.0.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/kxml2-min-2.3.0.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/stax-1.2.0.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/stax-api-1.0.1.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/wstx-asl-3.2.7.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/xmlpull-1.1.3.1.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/xom-1.1.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/xpp3_min-1.1.4c.jar" dest="${build}"/>
        <unzip src="${lib}/xstream/xstream-1.4.7.jar" dest="${build}"/>
        <unzip src="${lib}/forms-1.3.0.jar" dest="${build}"/>
        <unzip src="${lib}/jxbrowser-4.4.jar" dest="${build}"/>
        <unzip src="${lib}/license.jar" dest="${build}"/>
        <unzip src="${lib}/jxbrowser-win-4.4.jar" dest="${build}"/>

		<copy file="carmen-sandiego.jpg" todir="${build}">      	
        </copy>
	

        <jar destfile="${dist}/${jarname}.jar" basedir="${build}" includes="**" manifest="MANIFEST.MF"/>
    </target>

    <target name="correr" depends="makeJar" description="Corre el programa desde un Jar">
    	<!--<ant target="clean"/>-->
        <java jar="${dist}/${jarname}.jar" classpath="project.classpath" fork="true" classpathref="project.classpath"/>
    </target>
	
	<target name="run" depends="compile">
		<java classpath="project.classpath" classname="${build}/algo3/modelo/juego/Aplicacion.class"> </java>
	</target>
	
	<target name="limpiar">
		<delete dir="${dist}"/>
		<mkdir dir="${dist}"/>
	</target>
	
	<target name="create_run_jar" depends="limpiar, compile">
		<copy todir="${build}">
		    <fileset dir="${src}">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
        <jar destfile="${dist}/${jarname}.jar">
            <manifest>
                <attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader"/>
                <attribute name="Rsrc-Main-Class" value="${main_class_name}"/>
                <attribute name="Class-Path" value="."/>
                <attribute name="Rsrc-Class-Path" value="./ junit-4.10.jar cglib-nodep-2.2.jar dom4j-1.6.1.jar jdom-1.1.3.jar jdom2-2.0.5.jar jettison-1.2.jar joda-time-1.6.jar json-20080701.jar kxml2-2.3.0.jar kxml2-min-2.3.0.jar stax-1.2.0.jar stax-api-1.0.1.jar wstx-asl-3.2.7.jar xmlpull-1.1.3.1.jar xom-1.1.jar xpp3_min-1.1.4c.jar xstream-1.4.7.jar forms-1.3.0.jar jxbrowser-4.4.jar license.jar jxbrowser-win-4.4.jar"/>
            </manifest>
            <zipfileset src="${lib}/jar-in-jar-loader.zip"/>
            <!--<fileset dir="C:/Eclipse-Kepler/eclipse/workspace/TP2/bin"/>-->
        	<fileset dir="${build}"/>
        	
            <zipfileset dir="${lib}" includes="junit-4.10.jar"/>
            <zipfileset dir="${lib}/xstream" includes="cglib-nodep-2.2.jar"/>
            <zipfileset dir="${lib}/xstream" includes="dom4j-1.6.1.jar"/>
            <zipfileset dir="${lib}/xstream" includes="jdom-1.1.3.jar"/>
            <zipfileset dir="${lib}/xstream" includes="jdom2-2.0.5.jar"/>
            <zipfileset dir="${lib}/xstream" includes="jettison-1.2.jar"/>
            <zipfileset dir="${lib}/xstream" includes="joda-time-1.6.jar"/>
            <zipfileset dir="${lib}/xstream" includes="json-20080701.jar"/>
            <zipfileset dir="${lib}/xstream" includes="kxml2-2.3.0.jar"/>
            <zipfileset dir="${lib}/xstream" includes="kxml2-min-2.3.0.jar"/>
            <zipfileset dir="${lib}/xstream" includes="stax-1.2.0.jar"/>
            <zipfileset dir="${lib}/xstream" includes="stax-api-1.0.1.jar"/>
            <zipfileset dir="${lib}/xstream" includes="wstx-asl-3.2.7.jar"/>
            <zipfileset dir="${lib}/xstream" includes="xmlpull-1.1.3.1.jar"/>
            <zipfileset dir="${lib}/xstream" includes="xom-1.1.jar"/>
            <zipfileset dir="${lib}/xstream" includes="xpp3_min-1.1.4c.jar"/>
            <zipfileset dir="${lib}/xstream" includes="xstream-1.4.7.jar"/>
            <zipfileset dir="${lib}" includes="forms-1.3.0.jar"/>
            <zipfileset dir="${lib}" includes="jxbrowser-4.4.jar"/>
            <zipfileset dir="${lib}" includes="license.jar"/>
            <zipfileset dir="${lib}" includes="jxbrowser-win-4.4.jar"/>
        </jar>
    </target>
	
	<target name="jugar" depends="create_run_jar">
		<java jar="${dist}/${jarname}.jar" fork="true"/>		
	</target>

    <target name="Menu">
            <echo>ant clean : limpia los directorios de compilaciones pasadas (No necesario en correrPrograma)</echo>
            <echo>ant compilar : compila el programa</echo>
            <echo>ant corrertests : compila el programa y corre los tests</echo>
            <echo>ant correrPrograma : genera el archivo .jar y lo ejecuta</echo>
            <echo>ant makeJar: genera un archivo .jar ejecutable del juego</echo>
            <echo>ant compilarWork : compila el programa desde la estructura del workspace</echo>
            <echo>ant corrertestsWork : compila el programa y corre los tests desde la estructura del workspace</echo>
    </target>

</project>